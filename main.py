import streamlit as st
import time
import requests

from xss_check import check_xss
from sql_injection_check import check_sql_injection
from check_csrf import check_csrf
#from check_ssrf import check_ssrf
from check_lfi import check_lfi
from check_rce import check_rce


def get_color(vulnerability_level):
    if vulnerability_level == 1:
        return "Low vulnerability"
    elif vulnerability_level == 2:
        return "Moderate vulnerability"
    elif vulnerability_level == 3:
        return "High vulnerability"
    elif vulnerability_level == 4:
        return "Very high vulnerability"
    else:
        return "Unknown vulnerability level"

# Define vulnerability check functions (assuming they are implemented elsewhere)

def scan_website(url):
    vulnerabilities = []
    total_checks = 6  # Total number of vulnerability checks
    progress_bar = st.progress(0)  # Initialize the progress bar

    for i, check_function in enumerate([
        check_xss,check_sql_injection, check_csrf,
        #check_ssrf,
         check_lfi, check_rce
    ]):
        vulnerabilities.append(check_function(url))
        progress_percent = int(((i + 1) / total_checks) * 100)
        progress_bar.progress(progress_percent)  # Update the progress bar
        time.sleep(1)  # Simulate some delay (you can adjust this)

    progress_bar.empty()  # Clear the progress bar once scanning is complete
    return vulnerabilities

def display_vulnerability(vulnerability, rating):
    vulnerability_rating = get_color(rating)
    return f"- {vulnerability} ({vulnerability_rating})"

def display_links():
    links = {
        'SQL Injection': 'https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html',
        'XSS (Cross-Site Scripting)': 'https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html',
        'CSRF (Cross-Site Request Forgery)': 'https://cheatsheetseries.owasp.org/cheatsheets/Cross Site_Request_Forgery_Prevention_Cheat_Sheet.html',
        'SSRF (Server-side Request Forgery)': 'https://cheatsheetseries.owasp.org/cheatsheets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet.html',
        'LFI (Local File Inclusion)': 'https://owasp.org/www-project-web-security-testing-guide/v42/4- Web_Application_Security_Testing/07-Input_Validation_Testing/11.1- Testing_for_Local_File_Inclusion',
        'RCE (Remote Code Execution)': 'https://www.imperva.com/learn/application-security/remote-code-execution/'
    }
    
    st.write("Learn more about Prevention:")
    for name, link in links.items():
        st.markdown(f"<a href='{link}' style='color: black;'>{name}</a>", unsafe_allow_html=True)

def set_page_style(background_image_url):
    page_style = f"""
    <style>
    .stApp {{
    background-image: url("{background_image_url}");
    background-size: cover;
    color: black;
    }}
    
    .stButton button {{
    color: red;
    }}
    </style>
    """
    st.markdown(page_style, unsafe_allow_html=True)

if __name__ == '__main__':
    # Set the background image and page style
    set_page_style('https://images.saymedia-content.com/.image/t_share/MTkyOTkyMzE2OTQ3MjQ0MjUz/website-background-templates.jpg')

    # Set the title color using Markdown
    st.markdown("<h1 style='color: black;'>Website Vulnerability Scanner</h1>", unsafe_allow_html=True)

    url = st.text_input("Enter the website URL you want to scan:")
    scan_button = st.button("Scan")

    if scan_button:
        if url:
            scanning_message = st.empty()
            scanning_message.text("Scanning...")
            vulnerabilities = scan_website(url)
            scanning_message.empty()

            st.write("Results:")
            for vulnerability, rating in vulnerabilities:
                st.write(display_vulnerability(vulnerability, rating))

            display_links()
        else:
            st.warning("Please enter a website URL to scan.")
